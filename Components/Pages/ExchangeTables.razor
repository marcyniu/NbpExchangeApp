@namespace NbpExchangeApp.Components.Pages

@page "/ExchangeTables"

@using NbpExchangeApp.BusinessModels
@using NbpExchangeApp.Services
@using NbpExchangeApp.Components
@using NbpExchangeApp.Components.Shared

@inject NbpExchangeRatesService NbpExchangeRatesService

@rendermode InteractiveServer

<div class="mb-3 row">
    <label for="SelectedTable" class="col-sm-2 col-form-label text-end">Select Exchange Table:</label>
    <div class="col-sm-10">
        <select @bind="SelectedTable" class="form-select form-select-sm" style="width: auto;">
            <option value="A">Table A</option>
            <option value="B">Table B</option>
            <option value="C">Table C</option>
        </select>
    </div>
</div>

<DatePicker OnValueChanged="HandleValueChanged"/>

<br />
<br />

<span>@selectedDate</span>

<br />
<br />

<button type="button" class="btn btn-primary" @onclick="FetchExchangeRates" disabled="@exchangeRates">Fetch Exchange Rates</button>

<ExchangeTable exchangeRates="@exchangeRates" errorMessage="@errorMessage" isDataLoading="@isDataLoading"/>

@code {
    private string selectedTable = "A"; // Default value
    private ExchangeRates? exchangeRates;
    private string? errorMessage;
    private bool isDataLoading = false;
    private DateTime selectedDate {get; set;} = DateTime.Today;

    private string SelectedTable
    {
        get => selectedTable;
        set
        {
            if (selectedTable != value)
            {
                selectedTable = value;
                exchangeRates = null; // Reset exchangeRates when selectedTable changes
                errorMessage = null; // Reset errorMessage when selectedTable changes
            }
        }
    }

    private void HandleValueChanged(DateTime value)
    {
        selectedDate = value;
        exchangeRates = null; // Reset exchangeRates when selectedTable changes
        errorMessage = null; // Reset errorMessage when selectedTable changes
    }

    async Task FetchExchangeRates()
    {
        // Display spinner.
        isDataLoading = true;
        // Fetch exchange rates.
        (exchangeRates, errorMessage) = await NbpExchangeRatesService.GetExchangeTableRatesAsync(
            selectedTable,
            selectedDate.ToString("yyyy-MM-dd")
        ).ConfigureAwait(false);
        // Hide spinner.
        isDataLoading = false;
    }
}