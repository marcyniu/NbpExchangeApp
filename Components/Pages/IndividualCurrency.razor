@namespace NbpExchangeApp.Components.Pages

@page "/IndividualCurrency"

@using NbpExchangeApp.BusinessModels
@using NbpExchangeApp.Services
@using NbpExchangeApp.Components
@using NbpExchangeApp.Components.Shared

@inject NbpExchangeRatesService NbpExchangeRatesService

@rendermode InteractiveServer

<h2>Individual Currency</h2>

<br />

<ExchangeTablePicker selectedTable="@selectedTable" OnValueChanged="HandleExchangeTableChange"/>

<CurrencyPicker currencyCode="@currencyCode" OnValueChanged="HandleCurrencyChange"/>

<DateRangePicker startDate="@startDate" endDate="@endDate" OnValueChanged="HandleDateRangeChanged"/>

<span> add all the pickers for table, currency code, start and end date </span>

<p>@selectedTable</p>
<p>@currencyCode</p>
<p>@startDate</p>
<p>@endDate</p>

<p>@errorMessage</p>

<br />
<br />

<button type="button" class="btn btn-primary" @onclick="FetchCurrencyRates">Fetch Currency Rates</button>

<br />
<br />

<MessageViewer isDataLoading="@isDataLoading" errorMessage="@errorMessage" />

@code {
    private string currencyCode = "USD"; // Default value
    private string selectedTable = "A"; // Default value
    private ExchangeCurrency? exchangeCurrency;
    private string? errorMessage;
    private bool isDataLoading = false;
    private DateTime startDate { get; set; } = DateTime.Now;
    private DateTime endDate { get; set; } = DateTime.Now;
    private string json = "";

    private void HandleExchangeTableChange(string value)
    {
        selectedTable = value;
    }

    private void HandleCurrencyChange(string value)
    {
        currencyCode = value;
    }

    private void HandleDateRangeChanged(DateRangeSelection dateRangeSelection)
    {
        this.startDate = dateRangeSelection.StartDate;
        this.endDate = dateRangeSelection.EndDate;
    }

    async Task FetchCurrencyRates()
    {
        // Display spinner.
        isDataLoading = true;
        // Fetch exchange rates.
        (exchangeCurrency, errorMessage) = await NbpExchangeRatesService.GetExchangeCurrencyForTableAndPeriodAsync(
            currencyCode,
            selectedTable,
            startDate.ToString("yyyy-MM-dd"),
            endDate.ToString("yyyy-MM-dd")
        ).ConfigureAwait(false);
        // Hide spinner.
        isDataLoading = false;
    }
}