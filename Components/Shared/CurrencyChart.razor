@using System.Text.Json
@using NbpExchangeApp.BusinessModels
@inject IJSRuntime JS

@rendermode InteractiveServer

@if (ExchangeCurrency != null && ExchangeCurrency?.Rates != null)
{
    <div>
        <br />

        <h4><b>Currency Chart</b></h4>

        <br />

        <canvas id="@chartId" style="width: auto; height: 400px;"></canvas>

    </div>
} else
{
    <br />
    <br />

    <MessageViewer isDataLoading="@IsDataLoading" errorMessage="@ErrorMessage" />
}


@code {
    [Parameter]
    public required ExchangeCurrency ExchangeCurrency { get; set; }
    [Parameter]
    public string? ErrorMessage { get; set; } = null;
    [Parameter]
    public bool IsDataLoading { get; set; } = false;
    private List<string> labels = new ();
    private List<decimal> dataMid = new ();
    private List<decimal> dataAsk = new ();
    private List<decimal> dataBid = new ();

    private string chartId = "lineChart" + Guid.NewGuid().ToString("N"); // Unique ID for the chart

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ExchangeCurrency != null)
        {
            await CreateChart();
        }
    }

    private void BuildDataForChart()
    {
        if (ExchangeCurrency?.Rates != null)
        {
            labels.Clear();
            dataAsk.Clear();
            dataBid.Clear();
            dataMid.Clear();
            foreach (var rate in ExchangeCurrency.Rates)
            {
                labels.Add(rate.EffectiveDate ?? string.Empty);
                if (rate.Ask != null) {
                    dataAsk.Add(rate.Ask ?? 0);
                }
                if (rate.Bid != null) {
                    dataBid.Add(rate.Bid ?? 0);
                }
                if (rate.Mid != null) {
                    dataMid.Add(rate.Mid ?? 0);
                }
            }
        }
    }

    private async Task CreateChart()
    {
        BuildDataForChart();

        var preparedDatasets = new List<object>();

        if (dataMid.Any())
        {
            preparedDatasets.Add(new
            {
                label = $"Mid Exchange Rate [ PLN / {ExchangeCurrency.Code} ]",
                data = dataMid,
                borderColor = "blue",
                fill = false
            });
        }

        if (dataBid.Any())
        {
            preparedDatasets.Add(new
            {
                label = $"Bid Exchange Rate [ PLN / {ExchangeCurrency.Code} ]",
                data = dataBid,
                borderColor = "red",
                fill = true
            });
        }

        if (dataAsk.Any())
        {
            preparedDatasets.Add(new
            {
                label = $"Ask Exchange Rate [ PLN / {ExchangeCurrency.Code} ]",
                data = dataAsk,
                borderColor = "green",
                fill = true
            });
        }

        var chartData = new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = preparedDatasets
            },
            options = new
            {
                responsive = false,
                plugins = new
                {
                    legend = new
                    {
                        display = true,
                        position = "top"
                    }
                },
                scales = new
                {
                    x = new { title = new { display = true, text = "Date" } },
                    y = new { title = new { display = true, text = $"PLN / {ExchangeCurrency.Code}" } }
                }
            }
        };

        await JS.InvokeVoidAsync("createChart", chartId, chartData);
    }
}

<script type="text/javascript">

    var chart = null;

    function createChart(chartId, chartData) {
        var canvas = document.getElementById(chartId);
        if (canvas) {
            var ctx = canvas.getContext('2d');

            if (chart) {
                chart.destroy(); // Destroy the previous chart instance if it exists
            }

            // Create new chart.
            chart = new Chart(ctx, chartData);
        }
    }
</script>