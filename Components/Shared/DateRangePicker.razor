@namespace NbpExchangeApp.Components.Shared

@using Microsoft.AspNetCore.Components.Forms
@using NbpExchangeApp.BusinessModels

<div class="mb-3 row">
    <label for="SelectedPeriod" class="col-sm-2 col-form-label text-end">Pick Period:</label>
    <div class="col-auto">
        <select @bind="SelectedPeriod" class="form-select form-select-sm">
            <option value="today">Today</option>
            <option value="yesterday">Yesterday</option>
            <option value="last7days">Last 7 Days</option>
            <option value="thisweek">This Week</option>
            <option value="lastweek">Last Week</option>
            <option value="thismonth">This Month</option>
            <option value="lastmonth">Last Month</option>
            <option value="thisquarter">This Quarter</option>
            <option value="lastquarter">Last Quarter</option>
        </select>
    </div>
</div>


@code {
    [Parameter]
    public required DateTime startDate { get; set; }
    [Parameter]
    public required DateTime endDate { get; set; }
    private string selectedPeriod = "today"; // Default value

    [Parameter]
    public EventCallback<DateRangeSelection> OnValueChanged { get; set; }

    private string SelectedPeriod {
        get => selectedPeriod;
        set
        {
            if (selectedPeriod != value)
            {
                selectedPeriod = value;

                // Update the start and end dates based on the selected period.
                UpdateDateRange();

                // Invoke the callback with the new date range.
                var dateRangeSelection = new DateRangeSelection() {
                    StartDate = startDate,
                    EndDate = endDate
                };

                // Notify parent component of the change.
                OnValueChanged.InvokeAsync(dateRangeSelection);
            }
        }
    }

    private void UpdateDateRange()
    {
        switch (selectedPeriod)
        {
            case "today":
                startDate = DateTime.Today;
                endDate = DateTime.Today;
                break;
            case "yesterday":
                startDate = DateTime.Today.AddDays(-1);
                endDate = DateTime.Today.AddDays(-1);
                break;
            case "last7days":
                startDate = DateTime.Today.AddDays(-7);
                endDate = DateTime.Today;
                break;
            case "lastweek":
                var lastWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek - 7);
                var lastWeekEnd = lastWeekStart.AddDays(6);
                startDate = lastWeekStart;
                endDate = lastWeekEnd;
                break;
            case "thisweek":
                var thisWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
                var thisWeekEnd = thisWeekStart.AddDays(6) < DateTime.Today ? thisWeekStart.AddDays(6) : DateTime.Today;
                startDate = thisWeekStart;
                endDate = thisWeekEnd;
                break;
            case "thismonth":
                startDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
                endDate = startDate.AddMonths(1).AddDays(-1) < DateTime.Today ? startDate.AddMonths(1).AddDays(-1) : DateTime.Today;
                break;
            case "lastmonth":
                startDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(-1);
                endDate = startDate.AddMonths(1).AddDays(-1);
                break;
            case "thisquarter":
                var currentQuarter = (DateTime.Today.Month - 1) / 3 + 1;
                startDate = new DateTime(DateTime.Today.Year, (currentQuarter - 1) * 3 + 1, 1);
                endDate = startDate.AddMonths(3).AddDays(-1) < DateTime.Today ? startDate.AddMonths(3).AddDays(-1) : DateTime.Today;
                break;
            case "lastquarter":
                var lastQuarter = (DateTime.Today.Month - 1) / 3;
                startDate = new DateTime(DateTime.Today.Year, (lastQuarter - 1) * 3 + 1, 1).AddMonths(-3);
                endDate = startDate.AddMonths(3).AddDays(-1);
                break;
            default:
                startDate = DateTime.Today;
                endDate = DateTime.Today;
                break;
        }
    }
}